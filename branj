#!/bin/bash

set -e

BRANJ_CONFIG_DIR="${HOME}/.config/branj"
BRANJ_CONFIG_FILEPATH="${BRANJ_CONFIG_DIR}/.jiratoken"

print_usage_doc() {
  cat <<USAGE_DOC
Usage: `basename ${0}` [-s BRANCH_SUFFIX] JIRA_TICKET_NUMBER [BASE_BRANCH]

Automatically generates a branch name given a JIRA ticket number.

Note that this script requires jq; run 'brew install jq' to install.

USAGE_DOC
  echo "Example: $ `basename ${0}` PM-1337"
}

first_time_setup() {
  if [[ ! -d "${BRANJ_CONFIG_DIR}" ]]; then
    mkdir "${BRANJ_CONFIG_DIR}"
  fi

  cat <<FIRST_TIME_SETUP_DOC

================================================================================
Running first time setup.

Visit https://id.atlassian.com/manage/api-tokens to generate an API token:

1) Visit https://id.atlassian.com/manage/api-tokens (you may have to login)
2) Click "Create API Token"
3) For a Label, enter "branj"
4) Copy the API token to your clipboard.
================================================================================

FIRST_TIME_SETUP_DOC

  echo -n "Once you have generated a token, enter it here: "
  read JIRA_API_TOKEN

  echo -n "Please enter the email associated to your JIRA account: "
  read JIRA_EMAIL

  echo -n "Please enter the URL of your JIRA installation (e.g. https://acme-corp.atlassian.net): "
  read JIRA_URL

  echo "Writing username and token to ${BRANJ_CONFIG_FILEPATH}"
  echo -e "${JIRA_EMAIL}:${JIRA_API_TOKEN}\n${JIRA_URL}" > "${BRANJ_CONFIG_FILEPATH}"
}

generate_branch_name() {
  local TICKET_KEY="$(jq -r '.key' <(echo ${1}))"
  local TICKET_NAME="$(jq -r '.fields.summary' <(echo ${1}) | tr '[:upper:]' '[:lower:]')"
  local BRANCH_NAME="$(echo ${TICKET_KEY}-${TICKET_NAME} | sed -E 's/[^A-Za-z0-9]/-/g;s/-{2,}/-/g;s/-$//g')"

  if [[ -z "${BRANCH_SUFFIX}" ]]; then
    echo "${BRANCH_NAME}"
  else
    echo "${BRANCH_NAME}-${BRANCH_SUFFIX}"
  fi
}

checkout_branch() {
  local JIRA_RESPONSE="${1}"
  local BRANCH_NAME=$(generate_branch_name "${JIRA_RESPONSE}")

  set +e
  git rev-parse --verify "${BRANCH_NAME}" &> /dev/null
  local BRANCH_EXISTS=$?
  set -e

  if [[ "${BRANCH_EXISTS}" -eq 0 ]]; then
    git checkout "${BRANCH_NAME}"
    [[ ! -z "${BASE_BRANCH}" ]] && echo "Ignored base branch '${BASE_BRANCH}' since '${BRANCH_NAME}' already exists"
  else
    git checkout -b "${BRANCH_NAME}" ${BASE_BRANCH:+ "${BASE_BRANCH}"}
  fi
}

print_unauthorized_message() {
  cat <<UNAUTHORIZED_DOC

================================================================================
Got 401 Unauthorized from JIRA.

Please make sure you have entered your JIRA email and token correctly.

Visit https://id.atlassian.com/manage/api-tokens to generate a new API token.
================================================================================

UNAUTHORIZED_DOC

  echo "Removing ${BRANJ_CONFIG_FILEPATH}"
  rm "${BRANJ_CONFIG_FILEPATH}"

  exit 1
}

print_not_found_message() {
  echo "Couldn't find ticket ${1}."

  exit 1
}

get_branch_name_from_jira() {
  local CURL_OUTPUT="$(curl -s -w '\n%{http_code}' -u "${JIRA_AUTH_STRING}" -X GET -H 'Content-Type: application/json' "${JIRA_URL}/rest/api/3/issue/${1}")"
  local STATUS_CODE="${CURL_OUTPUT##*$'\n'}"
  local JSON_RESPONSE="${CURL_OUTPUT%%$'\n'*}"

  case "${STATUS_CODE}" in
    200)
      checkout_branch "${JSON_RESPONSE}"
      ;;
    401)
      print_unauthorized_message
      ;;
    404)
      print_not_found_message ${1}
      ;;
    *)
      echo "Got HTTP ${STATUS_CODE}. Payload:"
      echo "${JSON_RESPONSE}"
      exit 1
      ;;
  esac
}

read_from_config() {
  local LINE_NUMBER="${1}"
  echo "$(sed -n ${LINE_NUMBER}p ${BRANJ_CONFIG_FILEPATH})"
}

parse_args() {
  if [[ $# -lt 1 ]]; then
    print_usage_doc
    exit 1
  fi

  local NON_OPTION_ARGS=()

  # Extract leading non-option arguments, since getopts will immediately
  # stop processing at the first non-option argument.
  while [[ -n "${1}" ]] && [[ "${1:0:1}" != "-" ]]; do
    NON_OPTION_ARGS+=("${1}")
    shift
  done

  JIRA_TICKET_NUMBER="${NON_OPTION_ARGS[0]}"
  BASE_BRANCH="${NON_OPTION_ARGS[1]}"

  while getopts "s:" OPTION; do
    case $OPTION in
      s)
        BRANCH_SUFFIX="${OPTARG}"
        ;;
      \?)
        echo "Invalid option: -${OPTARG}" >&2
        exit 1
        ;;
      :)
        echo "Option -${OPTARG} requires an argument." >&2
        exit 1
        ;;
    esac
  done

  # Set non-option arguments if they come after option arguments
  shift "$((OPTIND-1))"
  JIRA_TICKET_NUMBER="${JIRA_TICKET_NUMBER:-${1}}"
  BASE_BRANCH="${BASE_BRANCH:-${2}}"
}

main() {
  parse_args "$@"
  
  if [[ ! -e "${BRANJ_CONFIG_FILEPATH}" ]]; then
    first_time_setup
  fi

  JIRA_AUTH_STRING=$(read_from_config 1)
  JIRA_URL=$(read_from_config 2)

  get_branch_name_from_jira "${JIRA_TICKET_NUMBER}"
}

main "$@"
